import { AppApiDal } from '../appApiDal';
import { inject, injectable } from '../../../../modules/common/di';
import { CreateCircleApiResponse } from './createCircleApiResponse';
import { GetCirclesApiResponse } from './getCirclesApiResponse';
import { AddMembersApiResponse, CircleMembersModel } from './addMembersApiResponse';
import { ApiResponseBase } from '../../../models/apiResponseBase';

/**
 * Circles API.
 * See {@link http://docs.iotapps.apiary.io/#reference/circles}
 */
@injectable('CirclesApi')
export class CirclesApi {
  @inject('AppApiDal') protected readonly dal!: AppApiDal;

  /**
   * The person who creates a Circle is the Administrator, until someone upgrades the Circle into a Premium Circle (or higher).
   * The people who pay for Premium services take over as the Administrator. You are always an implied member of the Circle you create.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/create-a-circle}
   *
   * The request returns the ID of the Circle that was created, for future reference.
   * Remember that we can add email addresses without having a user account created on our system.
   * Every user will get an email + push notification that they're part of the Circle.
   *
   * Any accounts that are email address only will receive a daily update with the top 3 items
   * from the conversation on what they missed out on, with an opportunity to sign up.
   *
   * @param {string} [circleName] Circle name.
   * @param [params] Request parameters.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @returns {Promise<CreateCircleApiResponse>}
   */
  createCircle(circleName: string, params?: { userId: number }): Promise<CreateCircleApiResponse> {
    return this.dal.post(
      'circles',
      {
        circle: {
          name: circleName,
        },
      },
      {params: params},
    );
  }

  /**
   * Circle member can have an Avatar image associated with their user account.
   * An Avatar image may be a picture, or it could be auto-generated by the app like a circle with your initials in it.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/get-circles}
   *
   * A user can see own circle user ID. A circle admin can see circle user ID's of other members.
   *
   * @param [params] Request parameters.
   * @param {number} [params.circleId] Circle ID. Optional parameter.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @param {string} [circleKey] Circle key for not registered circle members.
   * @returns {Promise<GetCirclesApiResponse>}
   */
  getCircles(params?: { circleId?: number; userId?: number }, circleKey?: string): Promise<GetCirclesApiResponse> {
    return this.dal.get('circles', {params: params, headers: circleKey ? {CIRCLE_KEY: circleKey} : undefined});
  }

  /**
   * Only a Circle Administrator may modify a Circle.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/modify-a-circle}
   *
   * @param {string} [circleName] Circle name.
   * @param [params] Request parameters.
   * @param {number} [params.circleId] Circle ID.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @returns {Promise<ApiResponseBase>}
   */
  modifyCircle(circleName: string, params: { circleId: number; userId?: number }): Promise<ApiResponseBase> {
    return this.dal.put(
      'circles',
      {
        circle: {
          name: circleName,
        },
      },
      {params: params},
    );
  }

  /**
   * Only a Circle Administrator may delete a Circle.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/delete-a-circle}
   *
   * @param params Request parameters
   * @param {number} params.circleId Circle ID.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @returns {Promise<ApiResponseBase>}
   */
  deleteCircle(params: { circleId: number; userId?: number }): Promise<ApiResponseBase> {
    return this.dal.delete('circles', {params: params});
  }

  /**
   * Any member of a circle may add more members to a circle, not just the administrator.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/managing-circle-members/add-members}
   *
   * Remember that we can add email addresses without having a user account created on our system.
   * Every user will get an email + push notification that they're part of the Circle.
   * Any accounts that are email address only will receive a daily update with the top 3 items
   * from the conversation on what they missed out on, with an opportunity to sign up.
   *
   * @param {number} circleId Circle ID.
   * @param {CircleMembersModel} members Members data to add.
   * @param [params] Request parameters.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @returns {Promise<AddMembersApiResponse>}
   */
  addMembers(circleId: number, members: CircleMembersModel, params?: { userId: number }): Promise<AddMembersApiResponse> {
    return this.dal.post(`circles/${encodeURIComponent(circleId.toString())}/members`, members, {
      params: params,
    });
  }

  /**
   * A circle member can opt-in or opt-out from circle notifications.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/managing-circle-members/update-members}
   *
   * @param {number} circleId Circle ID.
   * @param {number} status Status.
   * @param {number} nickname Nickname.
   * @param {boolean} [admin] Only circle admin can also update other users as admins.
   * @param {number} [circleUserId] Circle user ID to update other user by admin.
   * @param [params] Request parameters.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @param {string} [circleKey] Circle key.
   * @returns {Promise<ApiResponseBase>}
   */
  updateMembers(
    circleId: number,
    status: number,
    nickname: string,
    admin?: boolean,
    circleUserId?: number,
    params?: { userId?: number },
    circleKey?: string,
  ): Promise<ApiResponseBase> {
    return this.dal.put(
      `circles/${encodeURIComponent(circleId.toString())}/members`,
      {
        member: {
          status: status,
          nickname: nickname,
          admin: admin,
          circleUserId: circleUserId,
        },
      },
      {params: params, headers: circleKey ? {CIRCLE_KEY: circleKey} : undefined},
    );
  }

  /**
   * Only a Circle Administrator may delete other members.
   * Registered users may delete themselves.
   * See {@link https://iotapps.docs.apiary.io/#reference/circles/managing-circle-members/remove-members}
   *
   * @param {number} [circleId] Circle ID.
   * @param [params] Request parameters.
   * @param {number} [params.circleUserId] Circle user ID to delete from the circle.
   * @param {number} [params.userId] User ID to access by administrator. Optional parameter.
   * @returns {Promise<ApiResponseBase>}
   */
  removeMembers(circleId: number, params: { circleUserId: number; userId?: number }): Promise<ApiResponseBase> {
    return this.dal.delete(`circles/${encodeURIComponent(circleId.toString())}/members`, {params: params});
  }
}
