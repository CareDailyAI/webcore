import { ApiResponseBase } from '../../../models/apiResponseBase';

export interface CreateRulePhraseApiResponse extends ApiResponseBase {
  ruleTemplate: {
    id: number;
  }
}

/**
 * This is a bitmap that describes what kind of data is needed from the database to check the rule's condition. It is
 * used in optimizing the performance of the rule and the IoT Software Suite.
 * 1 - Location data, like "HOME" and "AWAY" states.
 * 2 - Device status, including the last update date, the last measurement date, the registration date, and whether the
 * device is connected or not.
 * 4 - Measurements from the device
 * 8 - The last alert information sent from the device is needed to check the condition of this rule phrase.
 */
export enum RuleDataTypeToRetrieve {
  LocationData = 1,
  DeviceStatus = 2,
  Measurements = 4,
  LastAlertInfo = 8
}

/**
 * Source code type: 0 - Drools, 1 - Python.
 */
export enum RuleSourceType {
  Drools = 0,
  Python = 1
}

/**
 * The type of number we expect for this input parameter.
 * 1 - integer
 * 2 - Float
 */
export enum RuleParameterValueType {
  Integer = 1,
  Float = 2
}

/**
 * Possible parameters categories
 */
export enum RuleParameterCategory {
  /**
   * This parameter in a rule phrase requires some user input to define
   */
  UserInputRequired = 1,
  /**
   * This parameter will fire periodically, based on a cron job
   */
  CronExpression = 2,
  /**
   * This parameter requires the user to specify a location
   */
  LocationId = 4,
  /**
   * This parameter requires a device
   */
  DeviceId = 5,
  /**
   * This parameter requires the user to specify a part of a device (i.e. Socket 0, Socket 1, Socket 2, etc.)
   */
  Index = 6,
  /**
   * Location event, such as 'HOME', 'AWAY', etc.
   */
  LocationEvent = 9,
  /**
   * This parameter requires the notification text to send to the user, which is generated by the UI with optional help
   * from the individual rule phrases.
   */
  NotificationText = 10,
  /**
   * Specify a parameter name from the device
   */
  ParameterName = 11,
  /**
   * Specify a property name from the device
   */
  PropertyName = 12,
  /**
   * A list of id/name pairs.
   */
  Enumeration = 13,
  /**
   * Application name.
   */
  AppName = 14,
  /**
   * A list of id/name pairs selecting by other parameter value.
   */
  SelectingEnumeration = 15
}

/**
 * Rule phrases (such as triggers, states, and actions) are referred to as 'templates' in the IoT Software Suite.
 * They consist of settings that define what is required to execute the phrase, and a script written for JBoss
 * Rules / Drools. See http://drools.org/learn/documentation.html.
 */
export interface RuleTemplate {
  /**
   * Template ID. The ID of this specific rule phrase.
   */
  id?: number;
  /**
   * Developer-friendly name to remember what the phrase represents
   */
  name: string;
  /**
   * This is the type of rule phrase from the perspective of the IoT Software Suite in terms of how to execute the
   * phrase. This may be different than the perspective of the app, which uses the 'display' attribute to specify how
   * the user would think about this phrase.
   */
  type: number;
  /**
   * This is the type of rule phrase from the perspective of the user, who doesn't know or care how the IoT Software
   * Suite actually interprets and executes the phrase on the backend.
   */
  display: number;
  /**
   * true - We require the user to confirm the timezone, so we execute the rule on time.
   * false - We do not require the user to confirm the timezone.
   */
  timezone: boolean;
  conditionData: RuleDataTypeToRetrieve;
  /**
   * The actual rule phrase. Use $parameterNameReferences with '$' characters within the text, to replace a part of
   * the sentence with the value from an input parameter that is associated with this phrase.
   */
  desc: string;
  /**
   * Past tense of the rule phrase. Used for notifications that will come to the user just after the event happened.
   */
  past: string;
  /**
   * List of product ID's / device types that are compatible with this rule phrase.
   */
  products: Array<{
    id: number;
    /**
     * Filter by this parameter name for the given product, optional
     */
    paramName?: string;
    /**
     * Comma-separated list of parameter values that may be reported to execute this rule phrase, optional
     */
    paramValue?: string;
  }>;
  /**
   * This is the Drools or Python language script. Please refer to existing examples when creating or customizing
   * your own rules. We opened up all the rule templates so you can peruse existing rules.
   */
  source: string;
  /**
   * Source code type: 0 - Drools, 1 - Python.
   */
  sourceType: RuleSourceType,
  updateDate?: string;
  updateDateMs?: number;
  /**
   * List of user input parameters to specify and fill out this rule phrase.
   */
  parameters: Array<{
    /**
     * Name of the input parameter. This can be referenced in the 'desc' and 'past' fields by prefacing it with a
     * '$' character. When that happens, we replace the $inputParamName in the 'desc' and 'past' fields with the
     * user-readable value of this input parameter, to form a complete phrase.
     */
    name: string;
    /**
     * Category of the parameter
     */
    category: RuleParameterCategory,
    hidden: boolean;
    optional: boolean;
    /**
     * This is exactly what you would tell the user to get them to give you the correct value for this parameter.
     * For example, "What temperature on the thermostat?".
     */
    desc: string;
    /**
     * The default value for this input parameter.
     */
    defaultValue: string;
    /**
     * The minimum value for this input parameter.
     */
    minValue?: string;
    /**
     * The maximum value for this input parameter.
     */
    maxValue?: string;
    /**
     * The type of number we expect for this input parameter.
     * 1 - integer
     * 2 - Float
     */
    valueType?: RuleParameterValueType;
  }>;
}

export interface CreateRuleTemplateModel {
  ruleTemplate: RuleTemplate;
}
